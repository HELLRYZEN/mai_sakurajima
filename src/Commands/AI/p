const Markov = require('markov-strings');

module.exports = {
    name: 'assistant',
    aliases: ['assist', 'help'],
    category: 'Ai',
    exp: 0,
    cool: 4,
    react: "✅",
    description: 'Get assistance from the personal assistant.',
    async execute(client, arg, M) {
        arg = Array.isArray(arg) ? arg : [arg];
        const question = arg.join(' ');

        try {
            if (!question) return M.reply('Please ask a question.');

            // Generate a response based on the user's question
            const response = await generateResponse(question);

            // Send the response as a reply
            M.reply(response);
        } catch (error) {
            console.error('Error:', error.message);
            M.reply('An error occurred while processing your request.');
        }
    }
};

// Function to generate a response based on the user's question
async function generateResponse(question) {
    // Sample input text for Markov chain (you can replace this with your own dataset)
    const inputTexts = [
        'Sample text for the Markov chain. You can add more text here.'
    ];

    // Create a Markov chain
    const markov = new Markov(inputTexts, { stateSize: 2 });

    // Generate text based on the user's question
    const result = await markov.generate({
        maxTries: 100,
        filter: (result) => result.string.startsWith(question.substring(0, 5)),
        maxWords: 100
    });

    // Return the generated text
    return result.string;
}

const MarkovChain = require('markovchain');

module.exports = {
    name: 'assistant',
    aliases: ['assist', 'help'],
    category: 'Ai',
    exp: 0,
    cool: 4,
    react: "✅",
    description: 'Get assistance from the personal assistant.',
    async execute(client, arg, M) {
        arg = Array.isArray(arg) ? arg : [arg];
        const prompt = arg.join(' ');

        try {
            if (!prompt) return M.reply('Please provide a prompt for the assistant.');

            // Initialize a markov chain with sample text or your own dataset
            const chain = new MarkovChain();
            chain.addText('Sample text for the markov chain.');

            // Generate text based on the prompt
            const generatedText = chain.start(prompt).end(100).process();

            // Send the generated text as a reply
            M.reply(`Here is the generated text:\n\n${generatedText}`);
        } catch (error) {
            console.error('Error:', error.message);
            M.reply('An error occurred while processing your request.');
        }
    }
};
